{"version":3,"sources":["header/headerContents/HeaderMenu.js","header/Header.js","App.js","serviceWorker.js","index.js"],"names":["HeaderMenu","className","src","Header","Component","App","inlineStyle","background","left","top","position","padding","transform","bgImage","strength","style","height","blur","min","max","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wRAEe,SAASA,IACtB,OACE,yBAAKC,UAAU,eACb,wBAAIA,UAAU,YACZ,4BAAI,2BAAG,yBAAKA,UAAU,MAAMC,IAAI,oBAChC,wBAAID,UAAU,WAAU,uBAAGA,UAAU,mBAAb,UAE1B,wBAAIA,UAAU,YACZ,4BAAI,2BAAG,yBAAKA,UAAU,OAAOC,IAAI,qBACjC,4BAAI,uBAAGD,UAAU,mBAAb,YACJ,4BAAI,uBAAGA,UAAU,mBAAb,Y,ICTSE,E,uKAEjB,OACE,yBAAKF,UAAU,UACb,kBAACD,EAAD,W,GAJ4BI,a,OCqDrBC,MAnDf,WACE,IAIMC,EAAc,CAClBC,WAAa,OACbC,KAAO,MACPC,IAAM,MACNC,SAAW,WACXC,QAAU,OACVC,UAAY,yBAEd,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,WAAD,CAAUY,QAfC,kCAegBC,SAAU,KACnC,yBAAKC,MAAO,CAAEC,OAAS,MACrB,yBAAKD,MAAOT,GAAZ,8BAIJ,kDACA,kBAAC,WAAD,CAAUO,QArBC,+EAqBgBI,KAAM,CAAEC,KAAM,EAAGC,IAAK,IAC/C,yBAAKJ,MAAO,CAAEC,OAAS,MACrB,yBAAKD,MAAOT,GAAZ,kBAGJ,kDAEA,kBAAC,WAAD,CAAUO,QA3BC,wGA2BgBC,UAAW,KACpC,yBAAKC,MAAO,CAAEC,OAAS,MACrB,yBAAKD,MAAOT,GAAZ,uBAGJ,kDAEA,kBAAC,WAAD,CACEO,QAlCS,0GAkCQC,SAAU,KAC3B,yBAAKC,MAAO,CAAEC,OAAS,MACrB,yBAAKD,MAAOT,GAAZ,iBAGJ,kDAEA,yBAAKS,MAAO,CAAEC,OAAS,aCtCTI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.50696f9d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function HeaderMenu() {\r\n  return (\r\n    <div className=\"header-menu\">\r\n      <ul className=\"header-1\">\r\n        <li><a><img className=\"sns\" src=\"./Img/sns.jpg\"></img></a></li>\r\n        <li className=\"li-menu\"><a className=\"header-top-menu\">BLOG</a></li>\r\n      </ul>\r\n      <ul className=\"header-2\">\r\n        <li><a><img className=\"user\" src=\"./Img/user.png\"></img></a></li>\r\n        <li><a className=\"header-top-menu\">JOIN US</a></li>\r\n        <li><a className=\"header-top-menu\">LOGIN</a></li>\r\n        </ul>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport \"./header.css\";\r\nimport HeaderMenu from './headerContents/HeaderMenu';\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <HeaderMenu />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Header from './header/Header';\nimport { Parallax } from 'react-parallax';\n\nfunction App() {\n  const image1 = \"https://i.imgur.com/CLUakBD.jpg\";\n  const image2 = \"https://i.pinimg.com/originals/cc/9a/5e/cc9a5ed90c789090c432d614a55223f9.jpg\";\n  const image3 = \"https://3.bp.blogspot.com/-lG8D-6m-WbA/TzQLkqm-rTI/AAAAAAAABqc/7b8ja6uhzu4/s1600/Winter+imitation.jpg\";\n  const image4 = \"https://4.bp.blogspot.com/-BwDj-C2u_eY/TzQL0bpuqmI/AAAAAAAABsA/tSMWV1g2Ilo/s1600/Red+autumn+morning.jpg\";\n  const inlineStyle = {\n    background : '#fff',\n    left : '50%',\n    top : '50%',\n    position : 'absolute',\n    padding : '20px',\n    transform : 'translate(-50%, -50%)',\n  }\n  return (\n    <div className=\"App\">\n      <Header />\n      <Parallax bgImage={image1} strength={600}>\n        <div style={{ height : 700 }}>\n          <div style={inlineStyle}>HTML inside the parallax</div>\n        </div>\n      </Parallax>\n\n      <h1>ㅣㅣㅣ</h1>\n      <Parallax bgImage={image2} blur={{ min: -1, max: 5 }}>\n        <div style={{ height : 700 }}>\n          <div style={inlineStyle}>Dynamic blur</div>\n        </div>\n      </Parallax>\n      <h1>ㅣㅣㅣ</h1>\n\n      <Parallax bgImage={image3} strength={-200}>\n        <div style={{ height : 700 }}>\n          <div style={inlineStyle}>Reverse direction</div>\n        </div>\n      </Parallax>\n      <h1>ㅣㅣㅣ</h1>\n\n      <Parallax \n        bgImage={image4} strength={200} >\n        <div style={{ height : 700 }}>\n          <div style={inlineStyle}>Render prop</div>\n        </div>\n      </Parallax>\n      <h1>ㅣㅣㅣ</h1>\n\n      <div style={{ height : '100vh' }}></div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}